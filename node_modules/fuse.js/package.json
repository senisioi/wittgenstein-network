{
  "name": "fuse.js",
  "author": {
    "name": "Kirollos Risk"
  },
  "version": "2.5.0",
  "description": "Lightweight fuzzy-search",
  "license": "Apache",
  "main": "./src/fuse.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/krisk/Fuse.git"
  },
  "dependencies": {},
  "scripts": {
    "test": "vows --spec"
  },
  "devDependencies": {
    "vows": "0.5.x",
    "grunt-bump": "0.0.11",
    "uglify-js": "*"
  },
  "readme": "# Fuse.js\n\n*Lightweight fuzzy-search, in JavaScript, with zero dependencies*\n\n[![npm version](https://badge.fury.io/js/fuse.js.svg)](https://badge.fury.io/js/fuse.js)\n[![Build Status](https://secure.travis-ci.org/krisk/Fuse.png?branch=master)](http://travis-ci.org/krisk/Fuse)\n[![Join the chat at https://gitter.im/fuselib/Lobby](https://badges.gitter.im/fuselib/Lobby.svg)](https://gitter.im/fuselib/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-red.svg)](https://www.paypal.me/kirorisk)\n[![Donate](https://img.shields.io/badge/patreon-donate-red.svg)](https://www.patreon.com/fusejs)\n\n[![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&label=Follow%20%40fusejs)](https://twitter.com/kirorisk)\n\nCheck out the [demo & usage](http://fusejs.io/)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**\n\n- [Options](#options)\n- [Methods](#methods)\n- [Weighted Search](#weighted-search)\n- [Contributing](#contributing)\n  - [Coding conventions](#coding-conventions)\n  - [Testing](#testing)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Options\n\n**keys** (*type*: `Array`)\n\nList of properties that will be searched.  This also supports nested properties:\n\n```javascript\nvar books = [{\n  title: \"Old Man's War\"\n  author: {\n    firstName: \"John\",\n    lastName: \"Scalzi\"\n  }\n}];\nvar fuse = new Fuse(books, { keys: [\"title\", \"author.firstName\"] });\n```\n\n---\n\n**id** (*type*: `String`)\n\nThe name of the identifier property. If specified, the returned result will be a list of the items' identifiers, otherwise it will be a list of the items.\n\n---\n\n**caseSensitive** (*type*: `Boolean`, *default*: `false`)\n\nIndicates whether comparisons should be case sensitive.\n\n---\n\n**include** (*type*: `Array`, *default*: `[]`)\n\nAn array of values that should be included from the searcher's output. When this array contains elements, each result in the list will be of the form `{ item: ..., include1: ..., include2: ... }`. Values you can include are `score`, `matches`. Ex:\n\n```javascript\n{ include: ['score', 'matches' ] }\n```\n\n---\n\n**shouldSort** (*type*: `Boolean`, *default*: `true`)\n\nWhether to sort the result list, by score.\n\n---\n\n**searchFn** (*type*: `Function`, *default*: `BitapSearcher`)\n\nThe search function to use.  Note that the search function (`[[Function]]`) must conform to the following API:\n\n```javascript\n/*\n@param pattern The pattern string to search\n@param options The search option\n*/\n[[Function]].constructor = function(pattern, options) { ... }\n\n/*\n@param text: the string to search in for the pattern\n@return Object in the form of:\n - isMatch: boolean\n - score: Int\n */\n[[Function]].prototype.search = function(text) { ... }\n```\n\n---\n\n**getFn** (*type*: `Function`, *default*: `Utils.deepValue`)\n\nThe get function to use when fetching an object's properties.  The default will search nested paths *ie foo.bar.baz*\n\n```javascript\n/*\n@param obj The object being searched\n@param path The path to the target property\n*/\n\n// example using an object with a `getter` method\ngetFn: function (obj, path) {\n  return obj.get(path);\n}\n```\n---\n\n**sortFn** (*type*: `Function`, *default*: `Array.prototype.sort`)\n\nThe function that is used for sorting the result list.\n\n---\n\n**location** (*type*: `Integer`, *default*: `0`)\n\nDetermines approximately where in the text is the pattern expected to be found.\n\n---\n\n**threshold** (*type*: `Decimal`, *default*: `0.6`)\n\nAt what point does the match algorithm give up. A threshold of `0.0` requires a perfect match (of both letters and location), a threshold of `1.0` would match anything.\n\n---\n\n**distance** (*type*: `Integer`, *default*: `100`)\n\nDetermines how close the match must be to the fuzzy location (specified by `location`). An exact letter match which is `distance` characters away from the fuzzy location would score as a complete mismatch. A `distance` of `0` requires the match be at the exact `location` specified, a `distance` of `1000` would require a perfect match to be within 800 characters of the `location` to be found using a `threshold` of `0.8`.\n\n---\n\n**maxPatternLength** (*type*: `Integer`, *default*: `32`)\n\nThe maximum length of the pattern. The longer the pattern, the more intensive the search operation will be.  Whenever the pattern exceeds the `maxPatternLength`, an error will be thrown.  Why is this important? Read [this](http://en.wikipedia.org/wiki/Word_(computer_architecture)#Word_size_choice).\n\n---\n\n**verbose** (*type*: `Boolean`, *default*: `false`)\n\nWill print to the console. Useful for debugging.\n\n---\n\n**tokenize** (*type*: `Boolean`, *default*: `false`)\n\nWhen true, the search algorithm will search individual words **and** the full string, computing the final score as a function of both. Note that when `tokenize` is `true`, the `threshold`, `distance`, and `location` are inconsequential for individual tokens.\n\n---\n\n**tokenSeparator** (*type*: `Regex`, *default*: `/ +/g`)\n\nRegex used to separate words when searching. Only applicable when `tokenize` is `true`.\n\n---\n\n**matchAllTokens** (*type*: `Boolean`, *default*: `false`)\n\nWhen `true`, the result set will only include records that match all tokens. Will only work if `tokenize` is also true.\n\n## Methods\n\n**`search(/*pattern*/)`**\n\n```javascript\n@param {String} pattern The pattern string to fuzzy search on.\n@return {Array} A list of all search matches.\n```\n\nSearches for all the items whose keys (fuzzy) match the pattern.\n\n**`set(/*list*/)`**\n\n```javascript\n@param {Array} list\n@return {Array} The newly set list\n```\n\nSets a new list for Fuse to match against.\n\n## Weighted Search\n\nIn some cases you may want certain keys to be weighted differently:\n\n```javascript\nvar fuse = new Fuse(books, {\n  keys: [{\n    name: 'title',\n    weight: 0.3\n  }, {\n    name: 'author',\n    weight: 0.7\n  }],\n});\n```\n\nWhere `0 < weight <= 1`\n\n## Contributing\n\n### Coding conventions\n\nCode should be run through [Standard Format](https://www.npmjs.com/package/standard-format).\n\n### Testing\n\nBefore submitting a pull request, please add relevant tests in `test/fuse-test.js`, and execute them via `npm test`.\n\nNote that **ALL TESTS MUST PASS**, otherwise the pull request will be automatically rejected.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/krisk/Fuse/issues"
  },
  "_id": "fuse.js@2.5.0",
  "_from": "fuse.js@"
}
